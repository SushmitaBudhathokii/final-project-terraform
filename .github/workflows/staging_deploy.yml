name: "Terraform Deploy - Staging"

on:
  push:
    branches:
      - staging
    paths:
      - network/**
      - webserver/**
      - modules/**
  pull_request:
    branches:
      - staging
    paths:
      - network/**
      - webserver/**
      - modules/**

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: Terraform Validate & Deploy
    runs-on: ubuntu-latest
    environment: staging
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    strategy:
      matrix:
        folder: [network, webserver]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./${{ matrix.folder }}
        continue-on-error: true

      - name: Terraform Init
        run: terraform init
        working-directory: ./${{ matrix.folder }}

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ./${{ matrix.folder }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out=tf.plan
        working-directory: ./${{ matrix.folder }}
        continue-on-error: true

      - name: Show Plan Output
        run: terraform show -no-color tf.plan > /tmp/plan-${{ matrix.folder }}.txt
        working-directory: ./${{ matrix.folder }}

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('/tmp/plan-${{ matrix.folder }}.txt', 'utf8');
            const chunks = plan.match(/.{1,65000}/gs) || [];
            for (let i = 0; i < chunks.length; i++) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### Terraform Plan (${context.job} â†’ ${{ matrix.folder }}) - Part ${i + 1}\n\`\`\`\n${chunks[i]}\n\`\`\``
              });
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./${{ matrix.folder }}
